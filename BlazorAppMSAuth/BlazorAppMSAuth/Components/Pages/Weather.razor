@page "/weather"
@using BlazorAppMSAuth.Helpers
@* @attribute [StreamRendering] *@
@rendermode @(new InteractiveServerRenderMode(false))
@inject TimeProvider timeProvider
@inject BazorAppMSAuth.Share.Interfaces.ServicesInterfaces.IVesselService VesselService;
<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>
<p>@now</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Created Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vessel in vessels)
            {
                <tr>
                    <td>@vessel.Id</td>
                    <td>@vessel.Name</td>
                    <td>@vessel.CreatedDate.ToString("yyyy-MM-dd")</td>
          
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    protected DateTime now;
    private List<BazorAppMSAuth.Share.Models.Vessel> vessels = new List<BazorAppMSAuth.Share.Models.Vessel>();


    protected override async Task OnInitializedAsync()
    {
        var vesselss = await VesselService.GetAllVesselsAsync();
        vessels = vesselss.ToList();

    }


    protected override async Task OnParametersSetAsync()
    {
        // Calculate the local date/time from the users browser in code
        now = timeProvider.ToLocalDateTime(DateTime.UtcNow);
    }


    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    
}
